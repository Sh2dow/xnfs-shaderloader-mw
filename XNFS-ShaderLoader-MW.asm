.text:10001000 ;
.text:10001000 ; +-------------------------------------------------------------------------+
.text:10001000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:10001000 ; |           Copyright (c) 2024 Hex-Rays, <support@hex-rays.com>           |
.text:10001000 ; |                      License info: 48-2137-ACAB-99                      |
.text:10001000 ; |                                                                         |
.text:10001000 ; +-------------------------------------------------------------------------+
.text:10001000 ;
.text:10001000 ; Input SHA256 : B0BF39AED2E99845B9C16C4BC299DD589E6B0BE63DFB06D336E6BA59D8412E35
.text:10001000 ; Input MD5    : 1114D956E7301F89B757B0CB7C76A7C5
.text:10001000 ; Input CRC32  : A455093E
.text:10001000 ; Compiler     : Visual C++
.text:10001000
.text:10001000 ; File Name   : D:\Repos\Games\XNFSMWShaderLoader\XNFS-ShaderLoader-MW.asi
.text:10001000 ; Format      : Portable executable for 80386 (PE)
.text:10001000 ; Imagebase   : 10000000
.text:10001000 ; Timestamp   : 596D31FE (Mon Jul 17 21:54:06 2017)
.text:10001000 ; Section 1. (virtual address 00001000)
.text:10001000 ; Virtual size                  : 0000158A (   5514.)
.text:10001000 ; Section size in file          : 00001600 (   5632.)
.text:10001000 ; Offset to raw data for section: 00000400
.text:10001000 ; Flags 60000020: Text Executable Readable
.text:10001000 ; Alignment     : default
.text:10001000 ; PDB File Name : E:\MyNFSCode\NFSMW_ShaderTest\Release\XNFS-ShaderLoader-MW\scripts\XNFS-ShaderLoader-MW.pdb
.text:10001000 ; OS type         :  MS Windows
.text:10001000 ; Application type:  DLL 32bit
.text:10001000
.text:10001000                 .686p
.text:10001000                 .mmx
.text:10001000                 .model flat
.text:10001000
.text:10001000 ; ===========================================================================
.text:10001000
.text:10001000 ; Segment type: Pure code
.text:10001000 ; Segment permissions: Read/Execute
.text:10001000 _text           segment para public 'CODE' use32
.text:10001000                 assume cs:_text
.text:10001000                 ;org 10001000h
.text:10001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:10001000
.text:10001000 ; =============== S U B R O U T I N E =======================================
.text:10001000
.text:10001000
.text:10001000 ; int *sub_10001000()
.text:10001000 sub_10001000    proc near               ; CODE XREF: DllMain(x,x,x)+48↓p
.text:10001000                 mov     eax, large fs:2Ch
.text:10001006                 mov     ecx, TlsIndex
.text:1000100C                 mov     ecx, [eax+ecx*4]
.text:1000100F                 mov     eax, dword_100043B0
.text:10001014                 cmp     eax, [ecx+4]
.text:1000101A                 jle     short loc_10001061
.text:1000101C                 push    offset dword_100043B0
.text:10001021                 call    __Init_thread_header
.text:10001026                 add     esp, 4
.text:10001029                 cmp     dword_100043B0, 0FFFFFFFFh
.text:10001030                 jnz     short loc_10001061
.text:10001032                 mov     dword_100043B4, offset aLodlightsAsi ; "LODLights.asi"
.text:1000103C                 mov     word_100043BE, 0
.text:10001045                 mov     dword_100043B8, 0
.text:1000104F                 call    sub_10001230
.text:10001054                 push    offset dword_100043B0
.text:10001059                 call    __Init_thread_footer
.text:1000105E                 add     esp, 4
.text:10001061
.text:10001061 loc_10001061:                           ; CODE XREF: sub_10001000+1A↑j
.text:10001061                                         ; sub_10001000+30↑j
.text:10001061                 mov     eax, offset dword_100043B4
.text:10001066                 retn
.text:10001066 sub_10001000    endp
.text:10001066
.text:10001066 ; ---------------------------------------------------------------------------
.text:10001067                 align 10h
.text:10001070
.text:10001070 ; =============== S U B R O U T I N E =======================================
.text:10001070
.text:10001070 ; Attributes: bp-based frame
.text:10001070
.text:10001070 ; _DWORD *__cdecl sub_10001070(char *lpAddress)
.text:10001070 sub_10001070    proc near               ; CODE XREF: sub_10001180+14↓p
.text:10001070
.text:10001070 var_18          = dword ptr -18h
.text:10001070 dwSize          = dword ptr -14h
.text:10001070 flOldProtect    = dword ptr -10h
.text:10001070 var_C           = byte ptr -0Ch
.text:10001070 var_8           = dword ptr -8
.text:10001070 var_4           = dword ptr -4
.text:10001070 lpAddress       = dword ptr  8
.text:10001070
.text:10001070                 push    ebp
.text:10001071                 mov     ebp, esp
.text:10001073                 sub     esp, 18h
.text:10001076                 push    ebx
.text:10001077                 push    esi
.text:10001078                 mov     esi, [ebp+lpAddress]
.text:1000107B                 lea     eax, [ebp+flOldProtect]
.text:1000107E                 push    edi
.text:1000107F                 push    eax             ; lpflOldProtect
.text:10001080                 push    40h ; '@'       ; flNewProtect
.text:10001082                 push    1               ; dwSize
.text:10001084                 push    esi             ; lpAddress
.text:10001085                 mov     edi, ecx
.text:10001087                 mov     [ebp+dwSize], 1
.text:1000108E                 mov     [ebp+var_18], esi
.text:10001091                 call    ds:VirtualProtect
.text:10001097                 test    eax, eax
.text:10001099                 setnz   al
.text:1000109C                 mov     [ebp+var_C], al
.text:1000109F                 mov     bl, [esi]
.text:100010A1                 test    al, al
.text:100010A3                 jz      short loc_100010BC
.text:100010A5                 mov     eax, [ebp+flOldProtect]
.text:100010A8                 lea     ecx, [ebp+var_4]
.text:100010AB                 push    ecx             ; lpflOldProtect
.text:100010AC                 push    eax             ; flNewProtect
.text:100010AD                 push    [ebp+dwSize]    ; dwSize
.text:100010B0                 mov     [ebp+var_4], eax
.text:100010B3                 push    [ebp+var_18]    ; lpAddress
.text:100010B6                 call    ds:VirtualProtect
.text:100010BC
.text:100010BC loc_100010BC:                           ; CODE XREF: sub_10001070+33↑j
.text:100010BC                 cmp     bl, 0E8h
.text:100010BF                 jb      loc_10001162
.text:100010C5                 cmp     bl, 0E9h
.text:100010C8                 jbe     short loc_1000110C
.text:100010CA                 cmp     bl, 0FFh
.text:100010CD                 jnz     loc_10001162
.text:100010D3                 mov     eax, [ebp+lpAddress]
.text:100010D6                 push    ecx             ; lpAddress
.text:100010D7                 mov     ecx, esp
.text:100010D9                 inc     eax
.text:100010DA                 mov     [ecx], eax
.text:100010DC                 call    sub_10001620
.text:100010E1                 add     esp, 4
.text:100010E4                 cmp     al, 15h
.text:100010E6                 jz      short loc_100010EC
.text:100010E8                 cmp     al, 25h ; '%'
.text:100010EA                 jnz     short loc_10001162
.text:100010EC
.text:100010EC loc_100010EC:                           ; CODE XREF: sub_10001070+76↑j
.text:100010EC                 mov     eax, [ebp+lpAddress]
.text:100010EF                 push    ecx             ; lpAddress
.text:100010F0                 mov     ecx, esp
.text:100010F2                 add     eax, 2
.text:100010F5                 mov     [ecx], eax
.text:100010F7                 call    sub_10001680
.text:100010FC                 add     esp, 4
.text:100010FF                 mov     eax, [eax]
.text:10001101                 mov     [edi], eax
.text:10001103                 mov     eax, edi
.text:10001105                 pop     edi
.text:10001106                 pop     esi
.text:10001107                 pop     ebx
.text:10001108                 mov     esp, ebp
.text:1000110A                 pop     ebp
.text:1000110B                 retn
.text:1000110C ; ---------------------------------------------------------------------------
.text:1000110C
.text:1000110C loc_1000110C:                           ; CODE XREF: sub_10001070+58↑j
.text:1000110C                 mov     esi, [ebp+lpAddress]
.text:1000110F                 lea     eax, [ebp+flOldProtect]
.text:10001112                 mov     ebx, ds:VirtualProtect
.text:10001118                 inc     esi
.text:10001119                 push    eax             ; lpflOldProtect
.text:1000111A                 push    40h ; '@'       ; flNewProtect
.text:1000111C                 push    4               ; dwSize
.text:1000111E                 push    esi             ; lpAddress
.text:1000111F                 mov     [ebp+dwSize], 4
.text:10001126                 mov     [ebp+var_18], esi
.text:10001129                 call    ebx ; VirtualProtect
.text:1000112B                 test    eax, eax
.text:1000112D                 setnz   al
.text:10001130                 mov     [ebp+var_C], al
.text:10001133                 mov     ecx, [esi]
.text:10001135                 mov     [ebp+var_8], ecx
.text:10001138                 test    al, al
.text:1000113A                 jz      short loc_10001152
.text:1000113C                 mov     eax, [ebp+flOldProtect]
.text:1000113F                 lea     ecx, [ebp+var_4]
.text:10001142                 push    ecx             ; lpflOldProtect
.text:10001143                 push    eax             ; flNewProtect
.text:10001144                 push    [ebp+dwSize]    ; dwSize
.text:10001147                 mov     [ebp+var_4], eax
.text:1000114A                 push    [ebp+var_18]    ; lpAddress
.text:1000114D                 call    ebx ; VirtualProtect
.text:1000114F                 mov     ecx, [ebp+var_8]
.text:10001152
.text:10001152 loc_10001152:                           ; CODE XREF: sub_10001070+CA↑j
.text:10001152                 lea     eax, [esi+4]
.text:10001155                 add     eax, ecx
.text:10001157                 mov     [edi], eax
.text:10001159                 mov     eax, edi
.text:1000115B                 pop     edi
.text:1000115C                 pop     esi
.text:1000115D                 pop     ebx
.text:1000115E                 mov     esp, ebp
.text:10001160                 pop     ebp
.text:10001161                 retn
.text:10001162 ; ---------------------------------------------------------------------------
.text:10001162
.text:10001162 loc_10001162:                           ; CODE XREF: sub_10001070+4F↑j
.text:10001162                                         ; sub_10001070+5D↑j ...
.text:10001162                 mov     dword ptr [edi], 0
.text:10001168                 mov     eax, edi
.text:1000116A                 pop     edi
.text:1000116B                 pop     esi
.text:1000116C                 pop     ebx
.text:1000116D                 mov     esp, ebp
.text:1000116F                 pop     ebp
.text:10001170                 retn
.text:10001170 sub_10001070    endp
.text:10001170
.text:10001170 ; ---------------------------------------------------------------------------
.text:10001171                 align 10h
.text:10001180
.text:10001180 ; =============== S U B R O U T I N E =======================================
.text:10001180
.text:10001180 ; Attributes: bp-based frame
.text:10001180
.text:10001180 ; int __cdecl sub_10001180(char *lpAddressa, int)
.text:10001180 sub_10001180    proc near               ; CODE XREF: DllMain(x,x,x)+56↓p
.text:10001180
.text:10001180 var_18          = dword ptr -18h
.text:10001180 dwSize          = dword ptr -14h
.text:10001180 flOldProtect    = dword ptr -10h
.text:10001180 var_C           = byte ptr -0Ch
.text:10001180 var_8           = dword ptr -8
.text:10001180 var_4           = dword ptr -4
.text:10001180 lpAddress       = dword ptr  8
.text:10001180 arg_4           = dword ptr  0Ch
.text:10001180
.text:10001180                 push    ebp
.text:10001181                 mov     ebp, esp
.text:10001183                 sub     esp, 18h
.text:10001186                 mov     eax, [ebp+lpAddress]
.text:10001189                 push    ebx
.text:1000118A                 push    esi
.text:1000118B                 push    edi
.text:1000118C                 push    ecx             ; lpAddress
.text:1000118D                 mov     edx, esp
.text:1000118F                 mov     [ebp+var_4], ecx
.text:10001192                 mov     [edx], eax
.text:10001194                 call    sub_10001070
.text:10001199                 mov     esi, [ebp+lpAddress]
.text:1000119C                 lea     eax, [ebp+flOldProtect]
.text:1000119F                 mov     ebx, ds:VirtualProtect
.text:100011A5                 add     esp, 4
.text:100011A8                 mov     [ebp+dwSize], 1
.text:100011AF                 mov     [ebp+var_18], esi
.text:100011B2                 push    eax             ; lpflOldProtect
.text:100011B3                 push    40h ; '@'       ; flNewProtect
.text:100011B5                 push    1               ; dwSize
.text:100011B7                 push    esi             ; lpAddress
.text:100011B8                 call    ebx ; VirtualProtect
.text:100011BA                 test    eax, eax
.text:100011BC                 setnz   [ebp+var_C]
.text:100011C0                 mov     byte ptr [esi], 0E8h
.text:100011C3                 cmp     [ebp+var_C], 0
.text:100011C7                 jz      short loc_100011DC
.text:100011C9                 mov     eax, [ebp+flOldProtect]
.text:100011CC                 lea     ecx, [ebp+var_8]
.text:100011CF                 push    ecx             ; lpflOldProtect
.text:100011D0                 push    eax             ; flNewProtect
.text:100011D1                 push    [ebp+dwSize]    ; dwSize
.text:100011D4                 mov     [ebp+var_8], eax
.text:100011D7                 push    [ebp+var_18]    ; lpAddress
.text:100011DA                 call    ebx ; VirtualProtect
.text:100011DC
.text:100011DC loc_100011DC:                           ; CODE XREF: sub_10001180+47↑j
.text:100011DC                 mov     esi, [ebp+lpAddress]
.text:100011DF                 mov     edi, [ebp+arg_4]
.text:100011E2                 inc     esi
.text:100011E3                 mov     [ebp+dwSize], 4
.text:100011EA                 mov     [ebp+var_18], esi
.text:100011ED                 lea     eax, [esi+4]
.text:100011F0                 sub     edi, eax
.text:100011F2                 lea     eax, [ebp+flOldProtect]
.text:100011F5                 push    eax             ; lpflOldProtect
.text:100011F6                 push    40h ; '@'       ; flNewProtect
.text:100011F8                 push    4               ; dwSize
.text:100011FA                 push    esi             ; lpAddress
.text:100011FB                 call    ebx ; VirtualProtect
.text:100011FD                 test    eax, eax
.text:100011FF                 setnz   [ebp+var_C]
.text:10001203                 mov     [esi], edi
.text:10001205                 cmp     [ebp+var_C], 0
.text:10001209                 jz      short loc_1000121E
.text:1000120B                 mov     eax, [ebp+flOldProtect]
.text:1000120E                 lea     ecx, [ebp+var_8]
.text:10001211                 push    ecx             ; lpflOldProtect
.text:10001212                 push    eax             ; flNewProtect
.text:10001213                 push    [ebp+dwSize]    ; dwSize
.text:10001216                 mov     [ebp+var_8], eax
.text:10001219                 push    [ebp+var_18]    ; lpAddress
.text:1000121C                 call    ebx ; VirtualProtect
.text:1000121E
.text:1000121E loc_1000121E:                           ; CODE XREF: sub_10001180+89↑j
.text:1000121E                 mov     eax, [ebp+var_4]
.text:10001221                 pop     edi
.text:10001222                 pop     esi
.text:10001223                 pop     ebx
.text:10001224                 mov     esp, ebp
.text:10001226                 pop     ebp
.text:10001227                 retn
.text:10001227 sub_10001180    endp
.text:10001227
.text:10001227 ; ---------------------------------------------------------------------------
.text:10001228                 align 10h
.text:10001230
.text:10001230 ; =============== S U B R O U T I N E =======================================
.text:10001230
.text:10001230 ; Attributes: bp-based frame
.text:10001230
.text:10001230 ; char sub_10001230()
.text:10001230 sub_10001230    proc near               ; CODE XREF: sub_10001000+4F↑p
.text:10001230
.text:10001230 lpAddress       = dword ptr -14h
.text:10001230 dwSize          = dword ptr -10h
.text:10001230 flOldProtect    = dword ptr -0Ch
.text:10001230 var_8           = byte ptr -8
.text:10001230 var_4           = dword ptr -4
.text:10001230
.text:10001230                 push    ebp
.text:10001231                 mov     ebp, esp
.text:10001233                 sub     esp, 14h
.text:10001236                 mov     word_100043BE, 0
.text:1000123F                 mov     dword_100043B8, 0
.text:10001249                 push    ebx
.text:1000124A                 push    esi
.text:1000124B                 push    edi
.text:1000124C                 mov     edi, ds:GetModuleHandleA
.text:10001252                 push    0               ; lpModuleName
.text:10001254                 call    edi ; GetModuleHandleA
.text:10001256                 mov     ebx, eax
.text:10001258                 push    0               ; lpModuleName
.text:1000125A                 mov     esi, [ebx+3Ch]
.text:1000125D                 call    edi ; GetModuleHandleA
.text:1000125F                 mov     ecx, [esi+ebx+28h]
.text:10001263                 add     ecx, ebx
.text:10001265                 sub     ecx, eax
.text:10001267                 add     ecx, 400000h
.text:1000126D                 cmp     ecx, 8245BCh
.text:10001273                 ja      loc_1000140A
.text:10001279                 jz      loc_100013A0
.text:1000127F                 cmp     ecx, 667BF0h
.text:10001285                 ja      loc_10001323
.text:1000128B                 jz      short loc_10001309
.text:1000128D                 cmp     ecx, 5C6FD0h
.text:10001293                 ja      short loc_100012E3
.text:10001295                 jz      loc_10001476
.text:1000129B                 cmp     ecx, 5C1E70h
.text:100012A1                 jz      short loc_100012C9
.text:100012A3                 cmp     ecx, 5C2130h
.text:100012A9                 jnz     loc_1000151B
.text:100012AF                 mov     dword_100043B8, 1010033h
.text:100012B9                 mov     al, 1
.text:100012BB                 mov     byte ptr word_100043BE+1, 0
.text:100012C2                 pop     edi
.text:100012C3                 pop     esi
.text:100012C4                 pop     ebx
.text:100012C5                 mov     esp, ebp
.text:100012C7                 pop     ebp
.text:100012C8                 retn
.text:100012C9 ; ---------------------------------------------------------------------------
.text:100012C9
.text:100012C9 loc_100012C9:                           ; CODE XREF: sub_10001230+71↑j
.text:100012C9                 mov     dword_100043B8, 10033h
.text:100012D3                 mov     al, 1
.text:100012D5                 mov     byte ptr word_100043BE+1, 0
.text:100012DC                 pop     edi
.text:100012DD                 pop     esi
.text:100012DE                 pop     ebx
.text:100012DF                 mov     esp, ebp
.text:100012E1                 pop     ebp
.text:100012E2                 retn
.text:100012E3 ; ---------------------------------------------------------------------------
.text:100012E3
.text:100012E3 loc_100012E3:                           ; CODE XREF: sub_10001230+63↑j
.text:100012E3                 cmp     ecx, 666BA0h
.text:100012E9                 jnz     loc_1000151B
.text:100012EF
.text:100012EF loc_100012EF:                           ; CODE XREF: sub_10001230+1E2↓j
.text:100012EF                 mov     dword_100043B8, 1010056h
.text:100012F9                 mov     al, 1
.text:100012FB                 mov     byte ptr word_100043BE+1, 1
.text:10001302                 pop     edi
.text:10001303                 pop     esi
.text:10001304                 pop     ebx
.text:10001305                 mov     esp, ebp
.text:10001307                 pop     ebp
.text:10001308                 retn
.text:10001309 ; ---------------------------------------------------------------------------
.text:10001309
.text:10001309 loc_10001309:                           ; CODE XREF: sub_10001230+5B↑j
.text:10001309                 mov     dword_100043B8, 10056h
.text:10001313                 mov     al, 1
.text:10001315                 mov     byte ptr word_100043BE+1, 0
.text:1000131C                 pop     edi
.text:1000131D                 pop     esi
.text:1000131E                 pop     ebx
.text:1000131F                 mov     esp, ebp
.text:10001321                 pop     ebp
.text:10001322                 retn
.text:10001323 ; ---------------------------------------------------------------------------
.text:10001323
.text:10001323 loc_10001323:                           ; CODE XREF: sub_10001230+55↑j
.text:10001323                 cmp     ecx, 82457Ch
.text:10001329                 ja      short loc_10001394
.text:1000132B                 jz      short loc_10001341
.text:1000132D                 cmp     ecx, 667C40h
.text:10001333                 jz      short loc_1000137A
.text:10001335                 cmp     ecx, 824570h
.text:1000133B                 jnz     loc_1000151B
.text:10001341
.text:10001341 loc_10001341:                           ; CODE XREF: sub_10001230+FB↑j
.text:10001341                 push    ecx             ; lpAddress
.text:10001342                 mov     eax, esp
.text:10001344                 mov     dword_100043B8, 15553h
.text:1000134E                 mov     byte ptr word_100043BE+1, 0
.text:10001355                 mov     dword ptr [eax], 406A20h
.text:1000135B                 call    sub_10001620
.text:10001360                 add     esp, 4
.text:10001363                 cmp     al, 0E9h
.text:10001365                 setnz   al
.text:10001368                 dec     al
.text:1000136A                 and     al, 48h
.text:1000136C                 mov     byte ptr word_100043BE, al
.text:10001371                 mov     al, 1
.text:10001373                 pop     edi
.text:10001374                 pop     esi
.text:10001375                 pop     ebx
.text:10001376                 mov     esp, ebp
.text:10001378                 pop     ebp
.text:10001379                 retn
.text:1000137A ; ---------------------------------------------------------------------------
.text:1000137A
.text:1000137A loc_1000137A:                           ; CODE XREF: sub_10001230+103↑j
.text:1000137A                 mov     dword_100043B8, 1010056h
.text:10001384                 mov     al, 1
.text:10001386                 mov     byte ptr word_100043BE+1, 0
.text:1000138D                 pop     edi
.text:1000138E                 pop     esi
.text:1000138F                 pop     ebx
.text:10001390                 mov     esp, ebp
.text:10001392                 pop     ebp
.text:10001393                 retn
.text:10001394 ; ---------------------------------------------------------------------------
.text:10001394
.text:10001394 loc_10001394:                           ; CODE XREF: sub_10001230+F9↑j
.text:10001394                 cmp     ecx, 8245B0h
.text:1000139A                 jnz     loc_1000151B
.text:100013A0
.text:100013A0 loc_100013A0:                           ; CODE XREF: sub_10001230+49↑j
.text:100013A0                 mov     edi, ds:VirtualProtect
.text:100013A6                 lea     eax, [ebp+flOldProtect]
.text:100013A9                 push    eax             ; lpflOldProtect
.text:100013AA                 push    40h ; '@'       ; flNewProtect
.text:100013AC                 mov     esi, 406A20h
.text:100013B1                 mov     dword_100043B8, 14553h
.text:100013BB                 push    1               ; dwSize
.text:100013BD                 push    esi             ; lpAddress
.text:100013BE                 mov     byte ptr word_100043BE+1, 0
.text:100013C5                 mov     [ebp+dwSize], 1
.text:100013CC                 mov     [ebp+lpAddress], esi
.text:100013CF                 call    edi ; VirtualProtect
.text:100013D1                 test    eax, eax
.text:100013D3                 setnz   al
.text:100013D6                 mov     [ebp+var_8], al
.text:100013D9                 mov     bl, [esi]
.text:100013DB                 test    al, al
.text:100013DD                 jz      short loc_100013F2
.text:100013DF                 mov     eax, [ebp+flOldProtect]
.text:100013E2                 lea     ecx, [ebp+var_4]
.text:100013E5                 push    ecx             ; lpflOldProtect
.text:100013E6                 push    eax             ; flNewProtect
.text:100013E7                 push    [ebp+dwSize]    ; dwSize
.text:100013EA                 mov     [ebp+var_4], eax
.text:100013ED                 push    [ebp+lpAddress] ; lpAddress
.text:100013F0                 call    edi ; VirtualProtect
.text:100013F2
.text:100013F2 loc_100013F2:                           ; CODE XREF: sub_10001230+1AD↑j
.text:100013F2                 cmp     bl, 0E9h
.text:100013F5                 setnz   al
.text:100013F8                 dec     al
.text:100013FA                 and     al, 48h
.text:100013FC                 mov     byte ptr word_100043BE, al
.text:10001401                 mov     al, 1
.text:10001403                 pop     edi
.text:10001404                 pop     esi
.text:10001405                 pop     ebx
.text:10001406                 mov     esp, ebp
.text:10001408                 pop     ebp
.text:10001409                 retn
.text:1000140A ; ---------------------------------------------------------------------------
.text:1000140A
.text:1000140A loc_1000140A:                           ; CODE XREF: sub_10001230+43↑j
.text:1000140A                 cmp     ecx, 0A402EDh
.text:10001410                 ja      short loc_10001490
.text:10001412                 jz      loc_100012EF
.text:10001418                 cmp     ecx, 85EC4Ah
.text:1000141E                 ja      short loc_1000146A
.text:10001420                 jz      loc_10001524
.text:10001426                 sub     ecx, 8252FCh
.text:1000142C                 jz      short loc_10001450
.text:1000142E                 sub     ecx, 40h ; '@'
.text:10001431                 jnz     loc_1000151B
.text:10001437                 mov     dword_100043B8, 1014553h
.text:10001441                 mov     al, 1
.text:10001443                 mov     byte ptr word_100043BE+1, cl
.text:10001449                 pop     edi
.text:1000144A                 pop     esi
.text:1000144B                 pop     ebx
.text:1000144C                 mov     esp, ebp
.text:1000144E                 pop     ebp
.text:1000144F                 retn
.text:10001450 ; ---------------------------------------------------------------------------
.text:10001450
.text:10001450 loc_10001450:                           ; CODE XREF: sub_10001230+1FC↑j
.text:10001450                 mov     dword_100043B8, 1015553h
.text:1000145A                 mov     al, 1
.text:1000145C                 mov     byte ptr word_100043BE+1, 0
.text:10001463                 pop     edi
.text:10001464                 pop     esi
.text:10001465                 pop     ebx
.text:10001466                 mov     esp, ebp
.text:10001468                 pop     ebp
.text:10001469                 retn
.text:1000146A ; ---------------------------------------------------------------------------
.text:1000146A
.text:1000146A loc_1000146A:                           ; CODE XREF: sub_10001230+1EE↑j
.text:1000146A                 cmp     ecx, 9912EDh
.text:10001470                 jnz     loc_1000151B
.text:10001476
.text:10001476 loc_10001476:                           ; CODE XREF: sub_10001230+65↑j
.text:10001476                 mov     dword_100043B8, 1010033h
.text:10001480                 mov     al, 1
.text:10001482                 mov     byte ptr word_100043BE+1, 1
.text:10001489                 pop     edi
.text:1000148A                 pop     esi
.text:1000148B                 pop     ebx
.text:1000148C                 mov     esp, ebp
.text:1000148E                 pop     ebp
.text:1000148F                 retn
.text:10001490 ; ---------------------------------------------------------------------------
.text:10001490
.text:10001490 loc_10001490:                           ; CODE XREF: sub_10001230+1E0↑j
.text:10001490                 cmp     ecx, 0D0D011h
.text:10001496                 ja      short loc_10001513
.text:10001498                 jz      short loc_100014F0
.text:1000149A                 cmp     ecx, 0C965ADh
.text:100014A0                 jz      short loc_100014CD
.text:100014A2                 cmp     ecx, 0D0AF06h
.text:100014A8                 jnz     short loc_1000151B
.text:100014AA                 mov     dword_100043B8, 1015545h
.text:100014B4                 mov     al, 1
.text:100014B6                 mov     word_100043BC, 2
.text:100014BF                 mov     byte ptr word_100043BE+1, 0
.text:100014C6                 pop     edi
.text:100014C7                 pop     esi
.text:100014C8                 pop     ebx
.text:100014C9                 mov     esp, ebp
.text:100014CB                 pop     ebp
.text:100014CC                 retn
.text:100014CD ; ---------------------------------------------------------------------------
.text:100014CD
.text:100014CD loc_100014CD:                           ; CODE XREF: sub_10001230+270↑j
.text:100014CD                 mov     dword_100043B8, 15549h
.text:100014D7                 mov     al, 1
.text:100014D9                 mov     word_100043BC, 400h
.text:100014E2                 mov     byte ptr word_100043BE+1, 0
.text:100014E9                 pop     edi
.text:100014EA                 pop     esi
.text:100014EB                 pop     ebx
.text:100014EC                 mov     esp, ebp
.text:100014EE                 pop     ebp
.text:100014EF                 retn
.text:100014F0 ; ---------------------------------------------------------------------------
.text:100014F0
.text:100014F0 loc_100014F0:                           ; CODE XREF: sub_10001230+268↑j
.text:100014F0                 mov     dword_100043B8, 15549h
.text:100014FA                 mov     al, 1
.text:100014FC                 mov     word_100043BC, 700h
.text:10001505                 mov     byte ptr word_100043BE+1, 0
.text:1000150C                 pop     edi
.text:1000150D                 pop     esi
.text:1000150E                 pop     ebx
.text:1000150F                 mov     esp, ebp
.text:10001511                 pop     ebp
.text:10001512                 retn
.text:10001513 ; ---------------------------------------------------------------------------
.text:10001513
.text:10001513 loc_10001513:                           ; CODE XREF: sub_10001230+266↑j
.text:10001513                 cmp     ecx, 0D3C3DBh
.text:10001519                 jz      short loc_10001524
.text:1000151B
.text:1000151B loc_1000151B:                           ; CODE XREF: sub_10001230+79↑j
.text:1000151B                                         ; sub_10001230+B9↑j ...
.text:1000151B                 xor     al, al
.text:1000151D                 pop     edi
.text:1000151E                 pop     esi
.text:1000151F                 pop     ebx
.text:10001520                 mov     esp, ebp
.text:10001522                 pop     ebp
.text:10001523                 retn
.text:10001524 ; ---------------------------------------------------------------------------
.text:10001524
.text:10001524 loc_10001524:                           ; CODE XREF: sub_10001230+1F0↑j
.text:10001524                                         ; sub_10001230+2E9↑j
.text:10001524                 pop     edi
.text:10001525                 pop     esi
.text:10001526                 mov     dword_100043B8, 30053h
.text:10001530                 mov     al, 1
.text:10001532                 mov     byte ptr word_100043BE+1, 1
.text:10001539                 pop     ebx
.text:1000153A                 mov     esp, ebp
.text:1000153C                 pop     ebp
.text:1000153D                 retn
.text:1000153D sub_10001230    endp
.text:1000153D
.text:1000153D ; ---------------------------------------------------------------------------
.text:1000153E                 align 10h
.text:10001540
.text:10001540 ; =============== S U B R O U T I N E =======================================
.text:10001540
.text:10001540 ; Attributes: bp-based frame
.text:10001540
.text:10001540 ; int __stdcall sub_10001540(int, int, char *FileName, int, int, int, int, int, int)
.text:10001540 sub_10001540    proc near               ; DATA XREF: DllMain(x,x,x)+40↓o
.text:10001540
.text:10001540 arg_0           = dword ptr  8
.text:10001540 arg_4           = dword ptr  0Ch
.text:10001540 FileName        = dword ptr  10h
.text:10001540 arg_C           = dword ptr  14h
.text:10001540 arg_10          = dword ptr  18h
.text:10001540 arg_14          = dword ptr  1Ch
.text:10001540 arg_18          = dword ptr  20h
.text:10001540 arg_1C          = dword ptr  24h
.text:10001540 arg_20          = dword ptr  28h
.text:10001540
.text:10001540                 push    ebp
.text:10001541                 mov     ebp, esp
.text:10001543                 push    esi
.text:10001544                 mov     esi, [ebp+FileName]
.text:10001547                 push    offset Mode     ; "rb"
.text:1000154C                 push    esi             ; FileName
.text:1000154D                 call    ds:fopen
.text:10001553                 add     esp, 8
.text:10001556                 test    eax, eax
.text:10001558                 jz      short loc_10001585
.text:1000155A                 push    eax             ; Stream
.text:1000155B                 call    ds:fclose
.text:10001561                 add     esp, 4
.text:10001564                 push    [ebp+arg_20]
.text:10001567                 push    [ebp+arg_1C]
.text:1000156A                 push    [ebp+arg_18]
.text:1000156D                 push    [ebp+arg_14]
.text:10001570                 push    [ebp+arg_10]
.text:10001573                 push    [ebp+arg_C]
.text:10001576                 push    esi
.text:10001577                 push    [ebp+arg_0]
.text:1000157A                 call    ds:D3DXCreateEffectFromFileA
.text:10001580                 pop     esi
.text:10001581                 pop     ebp
.text:10001582                 retn    24h ; '$'
.text:10001585 ; ---------------------------------------------------------------------------
.text:10001585
.text:10001585 loc_10001585:                           ; CODE XREF: sub_10001540+18↑j
.text:10001585                 push    [ebp+arg_20]
.text:10001588                 push    [ebp+arg_1C]
.text:1000158B                 push    [ebp+arg_18]
.text:1000158E                 push    [ebp+arg_14]
.text:10001591                 push    [ebp+arg_10]
.text:10001594                 push    [ebp+arg_C]
.text:10001597                 push    esi
.text:10001598                 push    [ebp+arg_4]
.text:1000159B                 push    [ebp+arg_0]
.text:1000159E                 call    ds:D3DXCreateEffectFromResourceA
.text:100015A4                 pop     esi
.text:100015A5                 pop     ebp
.text:100015A6                 retn    24h ; '$'
.text:100015A6 sub_10001540    endp
.text:100015A6
.text:100015A6 ; ---------------------------------------------------------------------------
.text:100015A9                 align 10h
.text:100015B0
.text:100015B0 ; =============== S U B R O U T I N E =======================================
.text:100015B0
.text:100015B0 ; Attributes: bp-based frame
.text:100015B0
.text:100015B0 ; BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
.text:100015B0 _DllMain@12     proc near               ; CODE XREF: dllmain_dispatch(HINSTANCE__ * const,ulong,void * const)+6B↓p
.text:100015B0                                         ; dllmain_dispatch(HINSTANCE__ * const,ulong,void * const)+83↓p
.text:100015B0
.text:100015B0 hinstDLL        = dword ptr  8
.text:100015B0 fdwReason       = dword ptr  0Ch
.text:100015B0 lpvReserved     = dword ptr  10h
.text:100015B0
.text:100015B0                 push    ebp
.text:100015B1                 mov     ebp, esp
.text:100015B3                 cmp     [ebp+fdwReason], 1
.text:100015B7                 push    esi
.text:100015B8                 jnz     short loc_1000160E
.text:100015BA                 push    1               ; int
.text:100015BC                 call    ds:__acrt_iob_func
.text:100015C2                 mov     esi, ds:freopen
.text:100015C8                 push    eax             ; Stream
.text:100015C9                 push    offset aW       ; "w"
.text:100015CE                 push    offset FileName ; "CON"
.text:100015D3                 call    esi ; freopen
.text:100015D5                 push    2               ; Ix
.text:100015D7                 call    ds:__acrt_iob_func
.text:100015DD                 push    eax             ; Stream
.text:100015DE                 push    offset aW       ; "w"
.text:100015E3                 push    offset FileName ; "CON"
.text:100015E8                 call    esi ; freopen
.text:100015EA                 add     esp, 1Ch
.text:100015ED                 mov     eax, esp
.text:100015EF                 push    ecx             ; LPVOID
.text:100015F0                 mov     dword ptr [eax], offset sub_10001540
.text:100015F6                 mov     esi, esp
.text:100015F8                 call    sub_10001000
.text:100015FD                 lea     ecx, [ebp+fdwReason] ; lpAddress
.text:10001600                 mov     dword ptr [esi], 6C60D2h
.text:10001606                 call    sub_10001180
.text:1000160B                 add     esp, 8
.text:1000160E
.text:1000160E loc_1000160E:                           ; CODE XREF: DllMain(x,x,x)+8↑j
.text:1000160E                 mov     eax, 1
.text:10001613                 pop     esi
.text:10001614                 pop     ebp
.text:10001615                 retn    0Ch
.text:10001615 _DllMain@12     endp
.text:10001615
.text:10001615 ; ---------------------------------------------------------------------------
.text:10001618                 align 10h
.text:10001620
.text:10001620 ; =============== S U B R O U T I N E =======================================
.text:10001620
.text:10001620 ; Attributes: bp-based frame
.text:10001620
.text:10001620 ; char __cdecl sub_10001620(char *lpAddress)
.text:10001620 sub_10001620    proc near               ; CODE XREF: sub_10001070+6C↑p
.text:10001620                                         ; sub_10001230+12B↑p
.text:10001620
.text:10001620 var_14          = dword ptr -14h
.text:10001620 dwSize          = dword ptr -10h
.text:10001620 flOldProtect    = dword ptr -0Ch
.text:10001620 var_8           = byte ptr -8
.text:10001620 var_4           = dword ptr -4
.text:10001620 lpAddress       = dword ptr  8
.text:10001620
.text:10001620                 push    ebp
.text:10001621                 mov     ebp, esp
.text:10001623                 sub     esp, 14h
.text:10001626                 push    ebx
.text:10001627                 push    esi
.text:10001628                 mov     esi, [ebp+lpAddress]
.text:1000162B                 lea     eax, [ebp+flOldProtect]
.text:1000162E                 push    eax             ; lpflOldProtect
.text:1000162F                 push    40h ; '@'       ; flNewProtect
.text:10001631                 push    1               ; dwSize
.text:10001633                 push    esi             ; lpAddress
.text:10001634                 mov     [ebp+dwSize], 1
.text:1000163B                 mov     [ebp+var_14], esi
.text:1000163E                 call    ds:VirtualProtect
.text:10001644                 test    eax, eax
.text:10001646                 setnz   al
.text:10001649                 mov     [ebp+var_8], al
.text:1000164C                 mov     bl, [esi]
.text:1000164E                 test    al, al
.text:10001650                 jz      short loc_10001669
.text:10001652                 mov     ecx, [ebp+flOldProtect]
.text:10001655                 lea     eax, [ebp+var_4]
.text:10001658                 push    eax             ; lpflOldProtect
.text:10001659                 push    ecx             ; flNewProtect
.text:1000165A                 push    [ebp+dwSize]    ; dwSize
.text:1000165D                 mov     [ebp+var_4], ecx
.text:10001660                 push    [ebp+var_14]    ; lpAddress
.text:10001663                 call    ds:VirtualProtect
.text:10001669
.text:10001669 loc_10001669:                           ; CODE XREF: sub_10001620+30↑j
.text:10001669                 pop     esi
.text:1000166A                 mov     al, bl
.text:1000166C                 pop     ebx
.text:1000166D                 mov     esp, ebp
.text:1000166F                 pop     ebp
.text:10001670                 retn
.text:10001670 sub_10001620    endp
.text:10001670
.text:10001670 ; ---------------------------------------------------------------------------
.text:10001671                 align 10h
.text:10001680
.text:10001680 ; =============== S U B R O U T I N E =======================================
.text:10001680
.text:10001680 ; Attributes: bp-based frame
.text:10001680
.text:10001680 ; int __cdecl sub_10001680(int *lpAddress)
.text:10001680 sub_10001680    proc near               ; CODE XREF: sub_10001070+87↑p
.text:10001680
.text:10001680 var_14          = dword ptr -14h
.text:10001680 dwSize          = dword ptr -10h
.text:10001680 flOldProtect    = dword ptr -0Ch
.text:10001680 var_8           = byte ptr -8
.text:10001680 var_4           = dword ptr -4
.text:10001680 lpAddress       = dword ptr  8
.text:10001680
.text:10001680                 push    ebp
.text:10001681                 mov     ebp, esp
.text:10001683                 sub     esp, 14h
.text:10001686                 push    esi
.text:10001687                 mov     esi, [ebp+lpAddress]
.text:1000168A                 lea     eax, [ebp+flOldProtect]
.text:1000168D                 push    eax             ; lpflOldProtect
.text:1000168E                 push    40h ; '@'       ; flNewProtect
.text:10001690                 push    4               ; dwSize
.text:10001692                 push    esi             ; lpAddress
.text:10001693                 mov     [ebp+dwSize], 4
.text:1000169A                 mov     [ebp+var_14], esi
.text:1000169D                 call    ds:VirtualProtect
.text:100016A3                 test    eax, eax
.text:100016A5                 setnz   al
.text:100016A8                 mov     [ebp+var_8], al
.text:100016AB                 mov     esi, [esi]
.text:100016AD                 test    al, al
.text:100016AF                 jz      short loc_100016C8
.text:100016B1                 mov     ecx, [ebp+flOldProtect]
.text:100016B4                 lea     eax, [ebp+var_4]
.text:100016B7                 push    eax             ; lpflOldProtect
.text:100016B8                 push    ecx             ; flNewProtect
.text:100016B9                 push    [ebp+dwSize]    ; dwSize
.text:100016BC                 mov     [ebp+var_4], ecx
.text:100016BF                 push    [ebp+var_14]    ; lpAddress
.text:100016C2                 call    ds:VirtualProtect
.text:100016C8
.text:100016C8 loc_100016C8:                           ; CODE XREF: sub_10001680+2F↑j
.text:100016C8                 mov     eax, esi
.text:100016CA                 pop     esi
.text:100016CB                 mov     esp, ebp
.text:100016CD                 pop     ebp
.text:100016CE                 retn
.text:100016CE sub_10001680    endp
.text:100016CE